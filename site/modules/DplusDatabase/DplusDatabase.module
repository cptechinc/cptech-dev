<?php namespace ProcessWire;

use atk4\dsql\Query;

class DplusDatabase extends Process implements ConfigurableModule {
	protected $connection_name = 'db_dplusdata';
	protected $basename        = 'data';

	const GRANT_USER_TABLE = "GRANT SELECT ON {database}.{table} TO {user}@'{host}'";

	const CONFIG_FIELDS = array(
		'db_name' => array(
			'name'        => 'db_name',
			'type'        => 'text',
			'label'       => 'Database Name',
			'description' => 'This is the name of the Database to connect to read Dplus Data',
			'notes'       => 'If omitted the name of the database derived from the company number',
			'icon'        => 'fa-database',
			'required'    => false,
			'pattern'     => '[A-Za-z0-9%#_-]*',
		),
		'db_host' => array(
			'name'        => 'db_host',
			'type'        => 'text',
			'label'       => 'Database Host',
			'description' => 'This is the database IP or URL to connect to Database',
			'notes'       => 'If omitted, will default to the same Host as the processwire Database Host',
			'icon'        => 'fa-database',
			'required'    => false,
			'pattern'     => '',
		),
		'db_user' => array(
			'name'        => 'db_user',
			'type'        => 'text',
			'label'       => 'Database User',
			'description' => 'This is the database IP or URL to connect to Database',
			'notes'       => 'If omitted, will default to the same Host as the processwire Database Host',
			'icon'        => 'fa-database',
			'required'    => false,
			'pattern'     => '[A-Za-z0-9%#_-]*',
		),
		'db_pass' => array(
			'name'        => 'db_pass',
			'type'        => 'text',
			'label'       => 'Database Password',
			'description' => 'Database User password',
			'notes'       => 'If omitted, will default to the same Password as the processwire Database Password',
			'icon'        => 'fa-database',
			'required'    => false,
			'pattern'     => '[A-Za-z0-9%#_-]*',
		),
		'db_port' => array(
			'name'        => 'db_port',
			'type'        => 'text',
			'label'       => 'Database Port',
			'description' => 'Database Port',
			'notes'       => 'If omitted, will default to the same Port as the processwire Database Port',
			'icon'        => 'fa-database',
			'required'    => false,
			'pattern'     => '',
		),
	);

	public function __construct() {
		foreach(self::getDefaultConfig() as $key => $value) {
			$this->$key = $value;
		}
	}

	public function getBasename() {
		return $this->basename;
	}

	static public function getDefaultConfig() {
		return array(
			'db_name' => '',
			'db_host' => 'localhost',
			'db_user' => '',
			'db_pass' => '',
			'db_port' => '3306',
		);
	}

	/**
	 * Return Database Table Names
	 * @return array
	 */
	public function getTables() {
		return $this->wire($this->connection_name)->getTables();
	}

	public function getCreateTable($table) {
		if ($this->tableExists($table)) {
			$sql = $this->wire($this->connection_name)->prepare("SHOW CREATE TABLE $table");
			$sql->execute();
			$tabledata = $sql->fetch(\PDO::FETCH_ASSOC);
			return $tabledata['Create Table'];
		} else {
			return $table;
		}
	}

	public function getGrantUserTable($user = '', $table = '', $database = '', $host = 'localhost', array $privs = null) {
		if (empty($privs)) {
			$privs = array('SELECT');
		}
		$statement = self::GRANT_USER_TABLE;

		if ($user && $table && $database) {
			$replacing = array('{privs}', '{database}', '{table}', '{user}','{host}');
			$with = array(implode(',', $privs), $database, $table, $user, $host);
			$statement = str_replace($replacing, $with, $statement);
		}
		return $statement;
	}

	/**
	 * Return if Table Exists in Database
	 * @param  string $table Table Name
	 * @return bool
	 */
	public function tableExists($table) {
		$exists = false;
		$q = new Query();
		$q->table('information_schema.tables');
		$q->field('COUNT(*)');
		$q->where('table_schema', $this->db_name);
		$q->where('table_name', $table);
		$sql = $this->wire($this->connection_name)->prepare($q->render());

		try {
			$sql->execute($q->params);
			$exists = boolval($sql->fetchColumn());
		} catch(Exception $e) {
			$exists = false;
		}
		return $exists;
	}

	/**
	 * Return Table Create Scripts keyed by Table Names
	 * @return array
	 */
	public function getCreateTables() {
		$content = '';
		$tables = $this->getTables();
		$structures = array();

		foreach ($tables as $table) {
			$structures[$table] = $this->getCreateTable($table);
		}
		return $structures;
	}

	/**
	 * Creates a PDO object and attaches it to wire to connect
	 * @return void
	 */
	public function connectDatabase() {
		$dbconfig = $this->dbconfig();
		$session = $this->wire('session');

		try {
			$pdo = WireDatabasePDO::getInstance($dbconfig);
			$this->wire($this->connection_name, $pdo, true);
			$session->set($this->connection_name, true);
		} catch (PDOException $e) {
			if (!empty($session->get($this->connection_name))) {
				$this->log_error($e->getMessage());
			}
			$session->remove($this->connection_name);
		}
	}

	/**
	 * Logs Error Message
	 * @param  string $message Error Message
	 * @return void
	 */
	public function logError($message) {
		$date = date("Y-m-d h:m:s");
		$class = get_class($this);
		$message = "[{$date}] [{$class}] $message";
		$this->wire('log')->save('db-errors', $message);
	}

	/**
	 * Returns Config to connect to Dplus Data Database
	 * @return Config
	 */
	public function dbconfig() {
		$config = $this->wire('config');
		$dbname = '';

		if (!empty($this->db_name)){
			$this->db_name = $this->db_name;
		} else {
			$this->db_name = !empty($config->dplusdbname) ? $config->dplusdbname : "data$config->COMPANYNBR";
		}

		$dbconfig = new Config();
		$dbconfig->dbHost = !empty($this->db_host) ? $this->db_host : $config->dbHost;
		$dbconfig->dbName = $this->db_name;
		$dbconfig->dbUser = !empty($this->db_user) ? $this->db_user : $config->dbUser;
		$dbconfig->dbPass = !empty($this->db_pass) ? $this->db_pass : $config->dbPass;
		$dbconfig->dbPort = !empty($this->db_port) ? $this->db_port : $config->dbPort;

		return $dbconfig;
	}
/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		$infoArray = array(
			'title'    => __('Dplus Database Connection'),
			'version'  => 115,
			'summary'  => __("Creates Connection to Dplus Database"),
			'autoload' => true,
			'singular' => true,
			'author'   => 'pauldro',
			'icon'     => 'database'
		);
		return $infoArray;
	}

	public function init() {
		parent::init();
		$this->connectDatabase();
	}

	static public function getModuleConfigInputfields(array $data) {
		$modules = wire('modules');
		$config = wire('config');
		$fieldmaker = $modules->get('ModuleConfigFields');

		$fields = new InputfieldWrapper();
		$defaults = self::getDefaultConfig();
		$data = array_merge($defaults, $data);

		foreach (self::CONFIG_FIELDS as $name => $traits) {
			$f = $fieldmaker->inputfield($traits, $data[$name]);
			$fields->add($f);
		}
		return $fields;
	}
}
