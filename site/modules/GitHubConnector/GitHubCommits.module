<?php
	use GitHubClient, GitHubCommit;

	class GitHubCommits extends WireData implements Module {
		protected $github;
		private $module_repos = 'GitHubPW';

		public static function getModuleInfo() {
			return array(
				'title' => 'GitHub Commits',
				'version' => 101,
				'summary' => "Interacts with GitHub's Commits API using GitHubConnector",
				'singular' => true,
				'autoload' => true,
				'requires' => array('GitHubConnector')
			);
		}

		public function init() {
			if (empty($this->github)) {
				$this->github = $this->wire('modules')->get('GitHubConnector')->get_client();
			}
		}

		public function get_client() {
			if (empty($this->github)) {
				$this->github = $this->wire('modules')->get('GitHubConnector')->get_client();
			}
			return $this->github;
		}

		// GITHUB FUNCTIONS
		public function import_commits(Page $repo, $branch = 'master') {
			if (empty($this->github->getPage())) {
				$this->github->setPage(1);
			}
			$github_commits = $this->github->repos->commits->listCommitsOnRepository($repo->owner, $repo->name, $branch);
			$pw_commits = $repo->child('template='.$this->wire('modules')->get($this->module_repos)->template_commit_list);

			foreach ($github_commits as $github_commit) {
				$sha = $github_commit->getSha();
				// Use $commitpage->numChildren("name=$sha") because now the $commit page will be
				// a Page with a template of repository-commits
				if (!$pw_commits->numChildren("name=$sha")) {
					$this->create_commit_page($github_commit, $pw_commits);
				}
			}
		}

		public function create_commit_page(GitHubCommit $commit, Page $commitlist) {
			$regex_merge = '/(merge)/i';

			$p = new Page();
			$p->of(false);
			$p->template = $this->wire('modules')->get($this->module_repos)->template_commit;
			$p->parent = $commitlist;
			$p->name = $commit->getSha();
			$p->title = $commit->getSha();
			$p->body = $commit->getCommit()->getMessage();
			$p->is_merge = boolval(preg_match($regex_merge, $commit->getCommit()->getMessage()));
			$p->updated_composer = $this->is_composerupdated($p, $commitlist);
			$p->date = $commit->getCommit()->getAuthor()->getDate();
			$p->save();
			$p->of(true);
		}

		public function is_composerupdated(Page $commit, Page $commitlist) {
			$regex_composer = '/(composer\.json|composer.lock)/i';
			$repo = $commit->parent()->parent('template='.$this->wire('modules')->get($this->module_repos)->template_repo);
			$github_fullcommit = $this->github->repos->commits->getSingleCommit($repo->owner, $repo->name, $commit->name);

			foreach ($github_fullcommit->getFiles() as $file) {
				if (boolval(preg_match($regex_merge, $file->getFilename()))) {
					return true;
				}
			}
			return false;
		}

		public function get_commit_fetchstatement(Page $commit) {
			$repo = $commit->parent("template=".$this->wire('modules')->get($this->module_repos)->template_repo);
			$url = $this->wire('modules')->get('GitHubConnector')->get_repourl($repo->owner, $repo->name);
			$fetchstring = "git fetch $url master && git cherry-pick $commit->sha -e -x";
			$fetchstring .= $commit->is_merge ? ' -m 1 ' : '';
			return $fetchstring;
		}

		public function get_commit_cherrypick_multiple(Page $firstcommit, Page $lastcommit) {
			$repo = $firstcommit->parent("template=".$this->wire('modules')->get($this->module_repos)->template_repo);
			$url = $this->wire('modules')->get('GitHubConnector')->get_repourl($repo->owner, $repo->name);
			$fetchstring = "git fetch $url master && git cherry-pick $firstcommit->sha^..$lastcommit->sha -e -x";
			return $fetchstring;
		}
}
