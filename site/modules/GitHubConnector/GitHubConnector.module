<?php
	use GitHubClient, GitHubCommit;

	class GitHubConnector extends Process implements ConfigurableModule {
		protected $github;
		private $module_repos = 'GitHubPW';

		public static function getModuleInfo() {
			return array(
				'title' => 'GitHub Connector',
				'version' => 101,
				'summary' => 'Configures and Connects to Github using tan-tan-kanarek/github-php-client',
				'singular' => true,
				'autoload' => true,
			);
		}

		static public function getDefaultConfig() {
			return array(
				'github_login'       => '', // default set to 4 weeks
				'github_password'    => '',
				'github_format_date' => 'Y-m-d',
				'github_format_time' => 'h:i A'
			);
		}

		public function init() {
			if (empty($this->github)) {
				$this->github = new GitHubClient();
				$this->github->setCredentials($this->github_login, $this->github_password);
			}
		}

		// GITHUB FUNCTIONS
		/**
		 * module settings
		 *
		 */
		static public function getModuleConfigInputfields(array $data) {

			$modules = wire('modules');
			$fields = new InputfieldWrapper();
			$defaults = self::getDefaultConfig();
			$data = array_merge($defaults, $data);

			$f = $modules->get('InputfieldText');
			$f->attr('name', 'github_login');
			$f->attr('pattern', '[A-Za-z0-9%#_-]*');
			$f->set('required', 'true');
			$f->icon = 'fa-github';
			$f->label = __('GitHub Login');
			$f->description = __('This is the login to connect to GitHub');
			$f->notes = __('');
			$f->value = $data['github_login'];
			$fields->add($f);

			$f = $modules->get('InputfieldText');
			$f->attr('name', 'github_password');
			$f->set('required', 'true');
			$f->icon = 'fa-key';
			$f->label = __('Github Password');
			$f->description = __('This is the password to connect to GitHub');
			$f->notes = __('');
			$f->value = $data['github_password'];
			$fields->add($f);

			$f = $modules->get('InputfieldText');
			$f->attr('name', 'github_format_date');
			$f->set('required', 'true');
			$f->icon = 'fa-calendar';
			$f->label = __('Github Date Format');
			$f->description = __('GitHub Date Format');
			$f->notes = __('');
			$f->value = $data['github_format_date'];
			$fields->add($f);

			$f = $modules->get('InputfieldText');
			$f->attr('name', 'github_format_time');
			$f->set('required', 'true');
			$f->icon = 'fa-clock-o';
			$f->label = __('Github Time Format');
			$f->description = __('GitHub Time Format');
			$f->notes = __('');
			$f->value = $data['github_format_time'];
			$fields->add($f);

			return $fields;
		}

		public function get_client() {
			if (empty($this->github)) {
				$this->github = new GitHubClient();
				$this->github->setCredentials($this->github_login, $this->github_password);
			}
			return $this->github;
		}

		public function get_repourl($owner, $repo) {
			$github_repo = $this->github->repos->get($owner, $repo);
			return $github_repo->getCloneUrl();
		}

		public function get_repolabels($owner, $repo) {
			return $this->github->issues->labels->listAllLabelsForThisRepository($owner, $repo);
		}

		public function create_label($owner, $repo, $name, $color) {
			return $this->github->issues->labels->createLabel($owner, $repo, $name, $color);
		}
}
